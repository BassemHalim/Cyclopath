package com.bassemHalim.User;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.microsoft.playwright.BrowserContext;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;


@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@DynamoDBTable(tableName = "Cyclopath")
public class User implements UserDetails {


    public User(String email, String password, Role role) {
        this.email = email;
        this.password = password;
        this.role = role;
        isEnabled = isAccountNonExpired = isCredentialsNonExpired = isAccountNonLocked = true;
    }

    @DynamoDBRangeKey(attributeName = "CyclopathSK")
    public String getCyclopathSK() {
        return CyclopathSK;
    }


    public void setCyclopathSK(String cyclopathSK) {
        CyclopathSK = cyclopathSK;
    }

    @DynamoDBIgnore
    private String CyclopathSK = "PROFILE";
    private String Id;

    @DynamoDBIndexHashKey(globalSecondaryIndexName = "email-index")
    @DynamoDBAttribute(attributeName = "email")
    private String email;
    @NotNull
    @DynamoDBAttribute(attributeName = "pwd")
    private String password;

    @DynamoDBAttribute(attributeName = "role")
    private Role role;

    @DynamoDBIgnore
    private BrowserContext browserContext;
    @DynamoDBIgnore
    private String browserState; // browser state: cookies + local storage

    private boolean isAccountNonExpired;
    private boolean isAccountNonLocked;
    private boolean isCredentialsNonExpired;
    private boolean isEnabled;

    @DynamoDBTypeConvertedEnum
    public Role getRole() {
        return role;
    }

    @Override
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "email")
    public String getUsername() {
        return email;
    }


    public void setUsername(String username) {
        email = username;
    }

    @DynamoDBHashKey(attributeName = "CyclopathPK")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return Id;
    }

    @Override
    @DynamoDBIgnore
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority(role.name()));
    }


    @Override
    @DynamoDBAttribute(attributeName = "isAccNonExpired")
    public boolean isAccountNonExpired() {
        return isAccountNonExpired;
    }

    @Override
    @DynamoDBAttribute(attributeName = "isNonLocked")
    public boolean isAccountNonLocked() {
        return isAccountNonLocked;
    }

    @Override
    @DynamoDBAttribute(attributeName = "isCredNonExpired")
    public boolean isCredentialsNonExpired() {
        return isCredentialsNonExpired;
    }

    @Override
    @DynamoDBAttribute(attributeName = "idEnabled")
    public boolean isEnabled() {
        return isEnabled;
    }
}

package com.bassemHalim.cyclopath.User;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;


@Data
@NoArgsConstructor
@AllArgsConstructor
@DynamoDBTable(tableName = "Cyclopath")
public class User implements UserDetails {
    //public class User {
//    @DynamoDBIgnore
//    private static final String PK_PREFIX = "USER#";
    @DynamoDBIgnore
    private static final String SK_PREFIX = "PROFILE";

    private String Id;
    @DynamoDBAttribute(attributeName = "email")
    private String email;
    @NotNull
    @DynamoDBAttribute(attributeName = "pwd")
    private String password;


    @DynamoDBAttribute(attributeName = "role")
    private Role role;

    @DynamoDBTypeConvertedEnum
    public Role getRole() {
        return role;
    }

    public User(String email, String password, Role role) {
        this.email = email;
        this.password = password;
        this.role = role;
    }

    @Override
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "email")
    public String getUsername() {
        return email;
    }

    @DynamoDBHashKey(attributeName = "CyclopathPK")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return Id;
    }

//    /**
//     * @return "USER#{UUID}"
//     */
//    @DynamoDBHashKey(attributeName = "CyclopathPK")
//    public String getPK() {
//        return PK_PREFIX + Id;
//    }

    @DynamoDBRangeKey(attributeName = "CyclopathSK")
    public String getSK() {
        return SK_PREFIX;
    }

    @Override
    @DynamoDBIgnore
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority(role.name()));
    }


    @Override
    @DynamoDBAttribute(attributeName = "isAccNonExpired")
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    @DynamoDBAttribute(attributeName = "isNonLocked")
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    @DynamoDBAttribute(attributeName = "isCredNonExpired")
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    @DynamoDBAttribute(attributeName = "idEnabled")
    public boolean isEnabled() {
        return true;
    }
}
